#-----------------------------------------------------------------------
# 
# Make file to build GRIB on the IBM supercomputer.
#
# Note that degrib compilation does not currently work, but the code
# as it stands has been left in this makefile in case useful.
#
# $Revision: 1$
# $Date: 12/01/2009 16:54:01$
# $Folder: source$
# $Workfile: Make_IBM$ 
#
# $Log:
#  1    Met_DB_Project 1.0         12/01/2009 16:54:01    Alison Weir
#       Makefile for building libgrib.a on the IBM supercomputer.
# $
#
#-----------------------------------------------------------------------
# (C) CROWN COPYRIGHT 2008 - MET OFFICE. All Rights Reserved.
#
# Met Office, United Kingdom
#
# The use, duplication and disclosure of this code is strictly
# prohibited without the permission of The Meteorological Database 
# Team at the above address.
#-----------------------------------------------------------------------


# turn off default suffix rules:
# Tell the compiler that .o's are dependent on .c's

.SUFFIXES:
.SUFFIXES: .F .o
.SUFFIXES: .f .o
.SUFFIXES: .c .o

FC          = xlf90_r
FFLAGS      = -q64 -qintsize=8 -qrealsize=8 -qfixed -qextname -c

CC          = gcc
CFLAGS      = -DL64 -I'./.' -DUNDERSCORE -DIBM_HPC -c
C_TO_F_FLAGS= -DL64 -I'./.' -DIBM_HPC -c

# preprocessing options
PP          = cpp
PFLAGS      = -DL64 -E -P -traditional

TARGET      = libgrib.a
LIB	= ./$(TARGET)

# FORTRAN source with preprocessor statements
FSRCS        = analyse.F \
               coder.F \
 	       decode.F \
	       gbyte.F \
	       gbytes.F \
	       grib_edtn_1_dec.F \
	       grib_edtn_1_enc.F \
	       limited_extract.F \
	       sbyte.F \
	       sbytes.F

# Fortran source not containing pre-processor statements, *.f
fSRCES       = ceil_log2.f \
	       prtbk1.f \
	       prtbk2.f \
               confp.f \
	       decfp.f \
	       find_mesgs.f \
	       findbox.f \
	       intarr_max.f \
	       intarr_min.f \
	       level_desc_dec.f \
	       level_desc_enc.f \
	       level_desc_table.f \
	       offset.f \
	       orig_centre_check.f \
	       parameter_check.f \
	       prbkn2.f \
	       prtbin.f \
	       range_check.f \
	       realarr_max.f \
	       realarr_min.f \
	       time_range_dec.f \
	       time_range_enc.f \
	       time_range_table.f \
	       time_unit_check.f

C_SOURCES    = degrib.c \
               gd_free.c \
	       gd_from_param_blocks.c\
	       gd_new.c \
	       gd_print.c \
	       grib_chars_matched.c \
	       grib_edtn_0_read.c \
	       grib_free.c \
	       grib_get_all.c \
	       grib_handle_read_error.c \
	       grib_insert_byte.c \
	       grib_insert_byte.c \
	       grib_new.c \
	       grib_read.c \
	       grib_read_block.c \
	       grib_read_bytes.c \
	       gribflags_to_flags.c \
	       gribint_to_u_int.c \
	       gribint_to_u_long.c \
	       pd_free.c \
	       pd_from_param_blocks.c \
	       pd_new.c \
	       pd_print.c \
	       process_grib_file.c	       

OBJS=          analyse.o \
               coder.o \
 	       decode.o \
	       gbyte.o \
	       gbytes.o \
	       grib_edtn_1_dec.o \
	       grib_edtn_1_enc.o \
	       limited_extract.o \
	       sbyte.o \
	       sbytes.o \
               ceil_log2.o \
	       prtbk1.o \
	       prtbk2.o \
               confp.o \
	       decfp.o \
	       find_mesgs.o \
	       findbox.o \
	       intarr_max.o \
	       intarr_min.o \
	       level_desc_dec.o \
	       level_desc_enc.o \
	       level_desc_table.o \
	       offset.o \
	       orig_centre_check.o \
	       parameter_check.o \
	       prbkn2.o \
	       prtbin.o \
	       range_check.o \
	       realarr_max.o \
	       realarr_min.o \
	       time_range_dec.o \
	       time_range_enc.o \
	       time_range_table.o \
	       time_unit_check.o 

COBJS=         degrib.o \
               gd_free.o \
	       gd_from_param_blocks.o \
	       gd_new.o \
	       gd_print.o \
	       grib_chars_matched.o \
	       grib_edtn_0_read.o \
	       grib_free.o \
	       grib_get_all.o \
	       grib_handle_read_error.o \
	       grib_insert_byte.o \
	       grib_insert_byte.o \
	       grib_new.o \
	       grib_read.o \
	       grib_read_block.o \
	       grib_read_bytes.o \
	       gribflags_to_flags.o \
	       gribint_to_u_int.o \
	       gribint_to_u_long.o \
	       pd_free.o \
	       pd_from_param_blocks.o \
	       pd_new.o \
	       pd_print.o \
	       process_grib_file.o	       

# Name of decoding program
DECODE_PROG = degrib

DECODE_OBJS = degrib.o process_grib_file.o grib_read.o grib_edtn_0_read.o \
              grib_read_block.o grib_read_bytes.o grib_handle_read_error.o \
              gribint_to_u_int.o gribint_to_u_long.o gribflags_to_flags.o \
              grib_free.o grib_new.o grib_chars_matched.o \
              grib_insert_byte.o pd_from_param_blocks.o pd_print.o pd_free.o \
              pd_new.o gd_from_param_blocks.o gd_print.o gd_free.o gd_new.o

all: $(LIB) $(DECODE_PROG)


$(LIB):	${OBJS}
	rm -f $@
	ar rv $@ ${OBJS}

.f.o:	$(fSRCS)
	$(FC) $(FFLAGS) $<
.c.o:   $(C_SOURCES)   
	$(CC) $(CFLAGS) $<

analyse.o: analyse.F
	$(PP) $(PFLAGS) analyse.F > analyse.f
	$(FC) $(FFLAGS) -o analyse.o analyse.f
coder.o: coder.F
	$(PP) $(PFLAGS) coder.F > coder.f
	$(FC) $(FFLAGS) -o coder.o coder.f
decode.o: decode.F
	$(PP) $(PFLAGS) decode.F > decode.f
	$(FC) $(FFLAGS) -o decode.o decode.f
gbyte.o: gbyte.F
	$(PP) $(PFLAGS) gbyte.F > gbyte.f
	$(FC) $(FFLAGS) -o gbyte.o gbyte.f
gbytes.o: gbytes.F
	$(PP) $(PFLAGS) gbytes.F > gbytes.f
	$(FC) $(FFLAGS) -o gbytes.o gbytes.f
grib_edtn_1_dec.o: grib_edtn_1_dec.F
	$(PP) $(PFLAGS) grib_edtn_1_dec.F > grib_edtn_1_dec.f
	$(FC) $(FFLAGS) -o grib_edtn_1_dec.o grib_edtn_1_dec.f
grib_edtn_1_enc.o: grib_edtn_1_enc.F
	$(PP) $(PFLAGS) grib_edtn_1_enc.F > grib_edtn_1_enc.f
	$(FC) $(FFLAGS) -o grib_edtn_1_enc.o grib_edtn_1_enc.f
limited_extract.o: limited_extract.F
	$(PP) $(PFLAGS) limited_extract.F > limited_extract.f
	$(FC) $(FFLAGS) -o limited_extract.o limited_extract.f
sbyte.o: sbyte.F
	$(PP) $(PFLAGS) sbyte.F > sbyte.f
	$(FC) $(FFLAGS) -o sbyte.o sbyte.f
sbytes.o: sbytes.F
	$(PP) $(PFLAGS) sbytes.F > sbytes.f
	$(FC) $(FFLAGS) -o sbytes.o sbytes.f


$(DECODE_PROG):  grib_get_all.o $(DECODE_OBJS) $(LIB) 
	$(CC) -f90libew -o $(DECODE_PROG) $(DECODE_OBJS) grib_get_all.o $(LIB) 

grib_get_all.o: grib_get_all.c
	$(CC) $(C_TO_F_FLAGS) -o grib_get_all.o grib_get_all.c

clean:  ${OBJS} ${C_OBJS}
	@/bin/rm -f *.o *.a degrib analyse.f coder.f decode.f gbyte.f gbytes.f \
	grib_edtn_1_dec.f grib_edtn_1_enc.f limited_extract.f sbyte.f sbytes.f ${@}

# Rule to update dependancy information


# dependencies

degrib.o: boolean.h stringterm.h
gd_free.o: grid_description.h minmax.h portability.h
gd_from_param_blocks.o: grid_description.h minmax.h portability.h array.h
gd_new.o: grid_description.h minmax.h portability.h
gd_print.o: grid_description.h minmax.h portability.h
grib_free.o: grib.h portability.h product_definition.h grid_description.h
grib_free.o: minmax.h
grib_get_all.o: grib.h portability.h product_definition.h grid_description.h
grib_get_all.o: minmax.h boolean.h
grib_handle_read_error.o: grib.h portability.h product_definition.h
grib_handle_read_error.o: grid_description.h minmax.h
grib_insert_byte.o: grib.h portability.h product_definition.h
grib_insert_byte.o: grid_description.h minmax.h boolean.h
grib_new.o: grib.h portability.h product_definition.h grid_description.h
grib_new.o: minmax.h
grib_read.o: grib.h portability.h product_definition.h grid_description.h
grib_read.o: minmax.h gribint.h
grib_read_block.o: grib.h portability.h product_definition.h
grib_read_block.o: grid_description.h minmax.h gribint.h
grib_read_bytes.o: grib.h portability.h product_definition.h
grib_read_bytes.o: grid_description.h minmax.h
grib_edtn_0_read.o: grib.h portability.h product_definition.h
grib_edtn_0_read.o: grid_description.h minmax.h gribflags.h boolean.h array.h
gribflags_to_flags.o: gribflags.h boolean.h
gribint_to_u_int.o: gribint.h
gribint_to_u_long.o: gribint.h
pd_free.o: product_definition.h portability.h
pd_from_param_blocks.o: product_definition.h portability.h array.h
pd_new.o: product_definition.h portability.h
pd_print.o: product_definition.h portability.h
process_grib_file.o: boolean.h grib.h portability.h product_definition.h
process_grib_file.o: grid_description.h minmax.h

